name: Samsung Galaxy A50

on:
  workflow_dispatch:
      inputs:
          release:
              description: 'Push release?'
              required: true
              default: false
              type: boolean

jobs:
  twrp:
    name: Build TeamWin Recovery Project (TWRP)
    if: github.event.repository.owner.id == github.event.sender.id
    runs-on: ubuntu-22.04
    steps:
    - uses: actions/checkout@master

    - name: Run pre-build housekeeping
      run: |
        docker images -q | xargs -r docker rmi
        sudo systemctl stop mysql
        sudo apt purge mysql-server mysql-client mysql-common mysql-server-core-* mysql-client-core-*
        sudo rm -rf /etc/mysql /var/lib/mysql /var/log/mysql
        sudo rm -rf /usr/share/dotnet etc/php /etc/sudo apt/sources.list.d
        sudo apt -y purge azure-cli ghc* zulu* llvm* firefox google* dotnet* powershell openjdk* php*
        sudo apt update
        sudo apt -y autoremove --purge
        sudo apt clean
        sudo rm -rf /usr/share/dotnet
        sudo rm -rf /opt/ghc
        sudo rm -rf "/usr/local/share/boost"
        sudo rm -rf "$AGENT_TOOLSDIRECTORY"

    - name: Install and update build dependencies
      run: |
        sudo apt update
        sudo apt full-upgrade
        sudo apt install git-core gnupg build-essential python2 python2-dev libelf-dev bzip2 openjdk-8-jdk lib32stdc++6 libc6-dev-i386 git flex bison gperf zip curl zlib1g-dev gcc-multilib g++-multilib libncurses5 libncurses5-dev x11proto-core-dev libx11-dev tree lib32z-dev libgl1-mesa-dev libxml2-utils xsltproc unzip jq -y
        sudo update-alternatives --install /usr/bin/python python /usr/bin/python2 1
        mkdir ~/bin
        curl https://storage.googleapis.com/git-repo-downloads/repo > ~/bin/repo
        chmod a+x ~/bin/repo

    - name: Set variables for compilation
      id: var
      run: |
        echo "::set-output name=recovery_url::$(jq -r '.recovery_url' configs/twrp.json)"
        echo "::set-output name=recovery_branch::$(jq -r '.recovery_branch' configs/twrp.json)"
        echo "::set-output name=git_username::$(jq -r '.git_username' configs/twrp.json)"
        echo "::set-output name=git_email::$(jq -r '.git_email' configs/twrp.json)"
        echo "::set-output name=use_own_dt::$(jq -r '.use_own_dt' configs/twrp.json)"
        echo "::set-output name=dt_url::$(jq -r '.dt_url' configs/twrp.json)"
        echo "::set-output name=dt_remote::$(jq -r '.dt_remote' configs/twrp.json)"
        echo "::set-output name=dt_branch::$(jq -r '.dt_branch' configs/twrp.json)"
        echo "::set-output name=dt_path::$(jq -r '.dt_path' configs/twrp.json)"
        echo "::set-output name=device_code::$(jq -r '.device_code' configs/twrp.json)"
        echo "::set-output name=fix_product::$(jq -r '.fix_product' configs/twrp.json)"
        echo "::set-output name=fix_misscom::$(jq -r '.fix_misscom' configs/twrp.json)"
        echo "::set-output name=fix_busybox::$(jq -r '.fix_busybox' configs/twrp.json)"
        echo "::set-output name=fix_branch::$(jq -r '.fix_branch' configs/twrp.json)"
        echo "::set-output name=date::$(date +%F)"

    - name: Sync sources with source
      run: |
        PATH="~/bin:$PATH"
        repo init --depth=1 -u ${{ steps.var.outputs.recovery_url }} -b ${{ steps.var.outputs.recovery_branch }}
        git clone ${{ steps.var.outputs.dt_url }} -b ${{ steps.var.outputs.dt_branch }} ${{ steps.var.outputs.dt_path }}
        repo sync -c -j$(nproc --all) --force-sync --no-clone-bundle --no-tags
        ls -al

    - name: Build recovery image
      run: |
        PATH="~/bin:$PATH"
        tree device
        export ALLOW_MISSING_DEPENDENCIES=true
        export TARGET_DEVICE_ALT="a50, a50dd"
        export JAVA_HOME="/usr/lib/jvm/java-8-openjdk-amd64"
        export TARGET_ARCH="arm64"
        export TW_DEFAULT_LANGUAGE="en"
        export USE_CCACHE="1"
        export LZMA_RAMDISK_TARGETS="recovery"
        source build/envsetup.sh
        lunch omni_${{ steps.var.outputs.device_code }}-eng
        mka clean
        mka recoveryimage -j$(nproc --all)

    - name: Build recovery package
      run: |
        mv ./out/target/product/a50dd/recovery.img ./package/recovery.img -f
        cd ./package
        zip -9 -r ./TWRP_v3.7.0-Unofficial_a50-$(date +%s).zip ./*
        cd ..
        mkdir release
        mv ./package/TWRP*.zip ./release/ -f

    - name: Build Odin-flashable package
      run: |
        cd ./package
        tar -H ustar -c recovery.img vbmeta.img > recovery.tar
        cd ..
        mv ./package/recovery.tar ./release/ODIN-TWRP_v3.7.0-Unofficial_a50-$(date +%s).tar -f

    - name: Upload release artifacts
      uses: actions/upload-artifact@v4
      with:
        name: twrp_release-${{ github.run_number }}
        path: 'release'
        if-no-files-found: error

  shrp:
    name: Build SkyHawk Recovery Project (SHRP)
    if: github.event.repository.owner.id == github.event.sender.id
    runs-on: ubuntu-22.04
    steps:
    - uses: actions/checkout@master

    - name: Run pre-build housekeeping
      run: |
        docker images -q | xargs -r docker rmi
        sudo systemctl stop mysql
        sudo apt purge mysql-server mysql-client mysql-common mysql-server-core-* mysql-client-core-*
        sudo rm -rf /etc/mysql /var/lib/mysql /var/log/mysql
        sudo rm -rf /usr/share/dotnet etc/php /etc/sudo apt/sources.list.d
        sudo apt -y purge azure-cli ghc* zulu* llvm* firefox google* dotnet* powershell openjdk* php*
        sudo apt update
        sudo apt -y autoremove --purge
        sudo apt clean
        sudo rm -rf /usr/share/dotnet
        sudo rm -rf /opt/ghc
        sudo rm -rf "/usr/local/share/boost"
        sudo rm -rf "$AGENT_TOOLSDIRECTORY"

    - name: Install and update build dependencies
      run: |
        sudo apt update
        sudo apt full-upgrade
        sudo apt install git-core gnupg build-essential python2 python2-dev libelf-dev openjdk-8-jdk bzip2 lib32stdc++6 libc6-dev-i386 git flex bison gperf zip curl zlib1g-dev gcc-multilib g++-multilib libncurses5 libncurses5-dev x11proto-core-dev libx11-dev tree lib32z-dev libgl1-mesa-dev libxml2-utils xsltproc unzip jq -y
        sudo update-alternatives --install /usr/bin/python python /usr/bin/python2 1
        mkdir ~/bin
        curl https://storage.googleapis.com/git-repo-downloads/repo > ~/bin/repo
        chmod a+x ~/bin/repo

    - name: Set variables for compilation
      id: var
      run: |
        echo "::set-output name=recovery_url::$(jq -r '.recovery_url' configs/shrp.json)"
        echo "::set-output name=recovery_branch::$(jq -r '.recovery_branch' configs/shrp.json)"
        echo "::set-output name=git_username::$(jq -r '.git_username' configs/shrp.json)"
        echo "::set-output name=git_email::$(jq -r '.git_email' configs/shrp.json)"
        echo "::set-output name=use_own_dt::$(jq -r '.use_own_dt' configs/shrp.json)"
        echo "::set-output name=dt_url::$(jq -r '.dt_url' configs/shrp.json)"
        echo "::set-output name=dt_remote::$(jq -r '.dt_remote' configs/shrp.json)"
        echo "::set-output name=dt_branch::$(jq -r '.dt_branch' configs/shrp.json)"
        echo "::set-output name=dt_path::$(jq -r '.dt_path' configs/shrp.json)"
        echo "::set-output name=device_code::$(jq -r '.device_code' configs/shrp.json)"
        echo "::set-output name=fix_product::$(jq -r '.fix_product' configs/shrp.json)"
        echo "::set-output name=fix_misscom::$(jq -r '.fix_misscom' configs/shrp.json)"
        echo "::set-output name=fix_busybox::$(jq -r '.fix_busybox' configs/shrp.json)"
        echo "::set-output name=fix_branch::$(jq -r '.fix_branch' configs/shrp.json)"
        echo "::set-output name=date::$(date +%F)"

    - name: Sync sources with source
      run: |
        PATH="~/bin:$PATH"
        repo init --depth=1 -u ${{ steps.var.outputs.recovery_url }} -b ${{ steps.var.outputs.recovery_branch }}
        git clone ${{ steps.var.outputs.dt_url }} -b ${{ steps.var.outputs.dt_branch }} ${{ steps.var.outputs.dt_path }}
        repo sync -c -j$(nproc --all) --force-sync --no-clone-bundle --no-tags
        ls -al

    - name: Build recovery image
      run: |
        PATH="~/bin:$PATH"
        tree device
        export ALLOW_MISSING_DEPENDENCIES=true
        export TARGET_DEVICE_ALT="a50, a50dd"
        export JAVA_HOME="/usr/lib/jvm/java-8-openjdk-amd64"
        export TARGET_ARCH="arm64"
        export TW_DEFAULT_LANGUAGE="en"
        export USE_CCACHE="1"
        export LZMA_RAMDISK_TARGETS="recovery"
        source build/envsetup.sh
        lunch omni_${{ steps.var.outputs.device_code }}-eng
        mka clean
        mka recoveryimage -j$(nproc --all)

    - name: Build recovery package
      run: |
        mv ./out/target/product/a50dd/recovery.img ./package_shrp/recovery.img -f
        cd ./package_shrp
        BUILD=$(date +%s); sed -i "s/buildnumber_here/$BUILD/" ./Files/SHRP/data/shrp_info.json
        zip -9 -r ./SHRP_v3.1_stable-Unofficial_a50-$(date +%s).zip ./*
        cd ..
        mkdir release
        mv ./package_shrp/SHRP*.zip ./release/ -f

    - name: Build Odin-flashable package
      run: |
        cd ./package_shrp
        tar -H ustar -c recovery.img vbmeta.img > recovery.tar
        cd ..
        mv ./package_shrp/recovery.tar ./release/ODIN-SHRP_v3.1_stable-Unofficial_a50-$(date +%s).tar -f

    - name: Upload release artifacts
      uses: actions/upload-artifact@v4
      with:
        name: shrp_release-${{ github.run_number }}
        path: 'release'
        if-no-files-found: error

  release:
    name: Release files and configs
    if: always()
    needs: [twrp, shrp]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: true
    steps:
    - uses: actions/checkout@v2

    - name: Set variables for release
      id: var
      run: |
        echo "::set-output name=recovery_url::$(jq -r '.recovery_url' configs/twrp.json)"
        echo "::set-output name=recovery_branch::$(jq -r '.recovery_branch' configs/twrp.json)"
        echo "::set-output name=git_username::$(jq -r '.git_username' configs/twrp.json)"
        echo "::set-output name=git_email::$(jq -r '.git_email' configs/twrp.json)"
        echo "::set-output name=use_own_dt::$(jq -r '.use_own_dt' configs/twrp.json)"
        echo "::set-output name=dt_url::$(jq -r '.dt_url' configs/twrp.json)"
        echo "::set-output name=dt_remote::$(jq -r '.dt_remote' configs/twrp.json)"
        echo "::set-output name=dt_branch::$(jq -r '.dt_branch' configs/twrp.json)"
        echo "::set-output name=dt_path::$(jq -r '.dt_path' configs/twrp.json)"
        echo "::set-output name=device_code::$(jq -r '.device_code' configs/twrp.json)"
        echo "::set-output name=fix_product::$(jq -r '.fix_product' configs/twrp.json)"
        echo "::set-output name=fix_misscom::$(jq -r '.fix_misscom' configs/twrp.json)"
        echo "::set-output name=fix_busybox::$(jq -r '.fix_busybox' configs/twrp.json)"
        echo "::set-output name=fix_branch::$(jq -r '.fix_branch' configs/twrp.json)"
        echo "::set-output name=date::$(date +%F)"

    - name: Merge TWRP release
      uses: actions/download-artifact@v4
      with:
        name: twrp_release-${{ github.run_number }}
        path: release

    - name: Merge SHRP release
      uses: actions/download-artifact@v4
      with:
        name: shrp_release-${{ github.run_number }}
        path: release

    - name: Upload release
      if: inputs.release == true
      uses: Hs1r1us/Release-AIO@v1.0
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        # The name of the tag
        tag_name: ci_${{ github.run_number }}
        release_name: ci_${{ github.run_number }}
        body: Android Third-Party Recoveries built by ${{ steps.var.outputs.git_username }}
        asset_files: './release'
